doctype html
html(lang='en')
  head
    include partials/head.pug
    title
      case mode
        when 'read'
        when 'update'
          | Webhook: #{webhook.hookId}
        when 'create'
          | New Webhook
  body
    - readMode = (mode === 'read')
    - readUpdateMode = (mode === 'read' || mode === 'update')
    form
      .form-group.row
        label.col-sm-2.form-label(for='hook-system') System
        .col-sm-4
          input#hook-system.form-control(type='text', value=webhook.system, readonly)
        label.col-sm-2.form-label(for='hook-event') Event
        .col-sm-4
          input#hook-event.form-control(type='text', value=webhook.event, readonly)
      if readUpdateMode
        .form-group.row
          label.col-sm-2.form-label(for='hook-id') ID
          .col-sm-10
            input#hook-id.form-control(type='text', value=webhook.hookId, readonly)
      .form-group.row
        label.col-sm-2.form-label(for='hook-scope') Scope
        .col-sm-4
          select#hook-scope-key.form-control(readonly=readUpdateMode)
            each key in scopes
              option(value=key, selected=webhook.scope[key])= key
        .col-sm-6
          input#hook-scope.form-control(type='text', value=Object.values(webhook.scope)[0], readonly=readUpdateMode)
      .form-group.row
        label.col-sm-2.form-label(for='hook-status') Status
        .col-sm-10
          select#hook-status.form-control(readonly=readMode)
            option(value='active', selected=(webhook.status === 'active')) active
            option(value='inactive', selected=(webhook.status === 'inactive')) inactive
      .form-group.row
        label.col-sm-2.form-label(for='hook-filter') Filter
        .col-sm-10
          input#hook-filter.form-control(type='text', value=webhook.filter, readonly=readMode)
      .form-group.row
        label.col-sm-2.form-label(for='hook-attribute') Attributes
        .col-sm-10
          input#hook-attribute.form-control(type='text', value=JSON.stringify(webhook.hookAttribute), readonly=readMode)
      .form-group.row
        label.col-sm-2.form-label(for='hook-callback') Callback URL
        .col-sm-10
          input#hook-callback.form-control(type='text', value=webhook.callbackUrl, readonly=readUpdateMode)
      if readUpdateMode
        .form-group.row
          label.col-sm-2.form-label(for='hook-urn') URN
          .col-sm-10
            input#hook-urn.form-control(type='text', value=webhook.urn, readonly)
        .form-group.row
          label.col-sm-2.form-label(for='hook-tenant') Tenant
          .col-sm-10
            input#hook-tenant.form-control(type='text', value=webhook.tenant, readonly)
        .form-group.row
          label.col-sm-2.form-label(for='hook-createdby') Created By
          .col-sm-4
            input#hook-createdby.form-control(type='text', value=webhook.createdBy, readonly)
          label.col-sm-2.form-label(for='hook-createddate') Created Date
          .col-sm-4
            input#hook-createddate.form-control(type='text', value=webhook.createdDate, readonly)
      .form-group.row
        .col
          case mode
            when 'create'
              button#create.btn.btn-primary(type='button') Create
              button#cancel.btn.btn-secondary(type='button') Cancel
            when 'update'
              button#create.btn.btn-primary(type='button') Update
              button#cancel.btn.btn-secondary(type='button') Cancel
    include partials/scripts.pug
    if (mode !== 'read')
      script.
        const COMMAND = '#{mode}';
      script
        include scripts/webhook-details.js
